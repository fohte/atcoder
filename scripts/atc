#!/usr/bin/env ruby

require 'json'
require 'optparse'
require 'time'
require 'shellwords'

CONTESTS_DIR = File.expand_path('../contests', __dir__)

class CLI
  SUBCOMMANDS = {
    'init' => OptionParser.new do |opt|
      opt.banner = 'Usage: init <contest-url|contest-id>'
    end,
    'submit' => OptionParser.new do |opt|
      opt.banner = 'Usage: submit <problem-url> OR submit <contest-id> <problem-id>'
    end,
    'edit' => OptionParser.new do |opt|
      opt.banner = 'Usage: edit <problem-url> OR edit <contest-id> <problem-id>'
    end,
    'test' => OptionParser.new do |opt|
      opt.banner = 'Usage: test <problem-url> OR test <contest-id> <problem-id>'
    end,
    'create-pr' => OptionParser.new do |opt|
      opt.banner = 'Usage: create-pr <contest-url|contest-id>'
    end
  }

  def initialize
    @options = {}
    @parser = OptionParser.new
    @parser.banner = "Usage: #{$PROGRAM_NAME} [options] <subcommand> [options]"
    @parser.separator ''
    @parser.separator 'Subcommands:'
    @parser.separator SUBCOMMANDS.keys
    @parser.separator ''
    @parser.separator "For help on each subcommand: #{$PROGRAM_NAME} <subcommand> -h"
  end

  def parse(argv)
    subcommand, *args = argv
    unless SUBCOMMANDS[subcommand]
      puts @parser.help
      exit(1)
    end

    sub_args = SUBCOMMANDS[subcommand].parse(args)
    parse_subcommand(subcommand, sub_args)
  end

  private

  def commit(message, options = [])
    system(%W[git add #{CONTESTS_DIR}].shelljoin) or raise 'Failed to add files to git'
    system((%W[git commit -m #{message}] + options).shelljoin) or raise 'Failed to commit'
  end

  def parse_subcommand(subcommand, argv)
    problem = Problem.parse_args(argv)
    case subcommand
    when 'init'
      Dir.chdir(CONTESTS_DIR) do
        system(%W[npx acc new #{problem.contest_id} --choice all].shelljoin) or raise 'Failed to initialize new contest'
        commit("#{problem.contest_id}: init #{Time.now.iso8601}")
      end

    when 'submit'
      problem.valid_dir!

      Dir.chdir(problem.path) do
        parse_subcommand('test', [problem.contest_id, problem.id])

        system(%W[oj submit --yes #{problem.url} main.rb].shelljoin) or raise 'Failed to submit'
        commit("#{problem.contest_id}/#{problem.id}: submit #{Time.now.iso8601}")
      end

    when 'edit'
      problem.valid_dir!

      Dir.chdir(problem.path) do
        commit("#{problem.contest_id}/#{problem.id}: start editing #{Time.now.iso8601}", %w[--allow-empty])
        system(%W[open #{problem.url}].shelljoin) or raise 'Failed to open problem URL'
        system(%W[#{ENV['EDITOR']} main.rb].shelljoin) or raise 'Failed to open editor'
      end

    when 'test'
      problem.valid_dir!

      Dir.chdir(problem.path) do
        system(['oj', 't', '-c', 'ruby main.rb', '-d', 'tests'].shelljoin) or raise 'Failed to pass all test cases'
      end

    else
      puts @parser.help
      exit(1)
    end
  end
end

class Problem
  attr_reader :contest_id

  class << self
    def parse_args(args)
      if args.size == 0
        from_pwd
      elsif args.size == 1 && args.first.start_with?('https://atcoder.jp/contests/')
        from_url(args.first)
      elsif args.size == 1
        new(args.first, nil)
      elsif args.size == 2
        contest_id, problem_id_or_label = args
        new(
          contest_id,
          find_problem(contest_id, problem_id_or_label)
        )
      else
        raise 'Invalid number of arguments'
      end
    end

    private

    def from_pwd
      contest_acc_json_path = File.expand_path('../contest.acc.json', Dir.pwd)
      raise 'Problem directory not found' unless File.exist?(contest_acc_json_path)

      contest_acc_json = JSON.parse(File.read(contest_acc_json_path))
      contest_id = contest_acc_json.dig('contest', 'id')
      preblem = contest_acc_json['tasks'].find { |task| task['directory']['path'] == File.basename(Dir.pwd) }
      new(contest_id, preblem)
    end

    def from_url(url)
      m = url.match(%r{https://atcoder.jp/contests/([^/]+)/tasks/([^/]+)})

      contest_id = m[1]
      problem_id = m[2]

      new(contest_id, find_problem(contest_id, problem_id: problem_id))
    end

    def parse_contest_json(contest_id)
      JSON.parse(File.read("#{CONTESTS_DIR}/#{contest_id}/contest.acc.json"))
    end

    def find_problem(contest_id, problem_id_or_label)
      parse_contest_json(contest_id)['tasks'].find do |task|
        task['id'].downcase == problem_id_or_label.downcase || task['label'].downcase == problem_id_or_label.downcase
      end
    end
  end

  def initialize(contest_id, problem)
    @contest_id = contest_id
    @problem = problem
  end

  def valid_problem!
    raise 'Problem not found' if @problem.nil?
  end

  def valid_dir!
    valid_problem!
    raise 'Problem directory not found' if dirname.nil?
  end

  def dirname
    @problem&.dig('directory', 'path')
  end

  def path
    "#{CONTESTS_DIR}/#{contest_id}/#{dirname}"
  end

  def id
    @problem&.dig('id')
  end

  def url
    @problem&.dig('url')
  end
end

CLI.new.parse(ARGV)
