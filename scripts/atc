#!/usr/bin/env bash

set -euo pipefail

usage() {
  cat << EOF
Usage: $0 <command>

Commands:
  new <contest-name>      Create a new contest
  next <contest-name>     Add a new problem to the contest
  submit <contest-name> <problem-name>
                          Submit the solution to the problem
  edit <contest-name> <problem-name>
                          Open $EDITOR to edit the problem
  test <contest-name> <problem-name>
                          Run test cases
EOF
}

if [[ $# -eq 0 ]]; then
  usage
  exit 1
fi

contests_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")/../contests" && pwd)"

commit() {
  message="$1"
  git add "$contests_dir"
  git commit -m "$message"
}

subcommand="$1"
shift

if [[ $1 =~ https://atcoder.jp/contests/([a-z0-9]+)/tasks/([a-z0-9_]+) ]]; then
  contest_id="${BASH_REMATCH[1]}"
  problem_id="${BASH_REMATCH[2]}"
elif [[ $1 =~ https://atcoder.jp/contests/([a-z0-9]+) ]]; then
  contest_id="${BASH_REMATCH[1]}"
  problem_id=""
elif [ -n "$2" ]; then
  contest_id="$1"
  problem_id="$2"
else
  contest_id="$1"
  problem_id=""
fi

if [ -n "$problem_id" ]; then
  problem_dirname="$(jq -r \
    --arg problem_id "$problem_id" \
    '.tasks[] | select(.id == $problem_id) | .directory.path' \
    "$contests_dir/$contest_id/contest.acc.json")"
fi

require_contest_id() {
  if [ -z "$contest_id" ]; then
    usage
    exit 1
  fi
}

require_problem_id() {
  if [ -z "$problem_id" ]; then
    usage
    exit 1
  fi
}

case "$subcommand" in
  new)
    require_contest_id

    cd "$contests_dir"

    npx acc new "$contest_id" --choice all

    commit "$contest_id: init"
    ;;

  # atc submit <contest-name> <problem-name>
  submit)
    require_contest_id
    require_problem_id

    cd "$contests_dir/$contest_id/$problem_dirname"

    url="$(jq -r \
      --arg dir "$problem_dirname" \
      '.tasks[] | select(.directory.path == $dir) | .url' \
      "$contests_dir/$contest_id/contest.acc.json")"

    oj submit --yes "$url" main.rb

    commit "$contest_id/$problem_id: submit"
    ;;

  # open $EDITOR to edit the problem
  # usage: atc edit <contest-name> <problem-name>
  edit)
    require_contest_id
    require_problem_id

    cd "$contests_dir/$contest_id/$problem_dirname"

    $EDITOR main.rb
    ;;

  # run test cases
  # usage: atc test <contest-name> <problem-name>
  test)
    require_contest_id
    require_problem_id

    cd "$contests_dir/$contest_id/$problem_dirname"

    oj t -c 'ruby main.rb' -d 'tests'
    ;;

  # create a pull request
  # usage: atc create-pr <contest-name>
  create-pr)
    require_contest_id

    json="$contests_dir/$contest_id/contest.acc.json"

    gh pr create \
      --title "$(jq -r '.contest.id' "$json"): $(jq -r '.contest.title' "$json")" \
      --body "$(jq -r '.contest.url' "$json")" \
      --base master \
      --head "$contest_id"
    ;;

  *)
    usage
    exit 1
    ;;
esac
